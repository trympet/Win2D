// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See LICENSE.txt in the project root for license information.

namespace Microsoft.Graphics.Canvas
{
    runtimeclass CanvasDrawingSession;

    [version(VERSION), uuid(F60AFD09-E623-4BE0-B750-578AA920B1DB), exclusiveto(CanvasDrawingSession)]
    interface ICanvasDrawingSession : IInspectable
        requires Windows.Foundation.IClosable, ICanvasResourceCreatorWithDpi
    {
        [overload("Clear")]
        HRESULT Clear([in] Windows.UI.Color color);

        [overload("Clear"), default_overload]
        HRESULT ClearHdr([in] NUMERICS.Vector4 color);

        //
        // Calls ID2D1RenderTarget::Flush() on wrapped device context.
        //
        HRESULT Flush();

        //
        // Some of these methods have large numbers of overloads.
        //
        // The following naming scheme is used:
        //
        // {METHOD}(AtCoords)?With(Brush|Color)(And{PARAMn})*
        //
        // Where {METHOD} is the method name and {PARAMn} is the nth additional
        // parameter.
        //
        // Examples:
        //
        //   DrawLineWithBrush(Vector2, Vector2, Brush)   (0 additional parameters)
        //   DrawLineAtCoordsWithBrush(float, float, float, float, Brush)  (0 additional parameters)
        //   DrawLineWithColor(Vector2, Vector2, Color)   (0 additional parameters)
        //   DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(float, float, float, float, Brush, float, StrokeStyle) (2 additional parameters)
        //
        // The overloads are sorted by:
        //
        //   - additional parameter count
        //   - Brush before Color
        //   - without-AtCoords before with-AtCoords
        //
        // Default overloads are chosen by picking the richest and most complete functionality:
        //
        //   - Prefer WithBrush over WithColor
        //   - Prefer packed structures (eg. Vector2) over expanded (AtCoords) variants
        //

           
        // 
        // DrawImage
        //
        // Direct2D supports two APIs for drawing image-like things:
        // 
        // - DrawBitmap() which only works for ID2D1Bitmap and 
        //
        // - DrawImage() which works for any ID2D1Image (bitmap, effect output,
        //   commandlist)
        //
        // Generally, DrawBitmap() is faster than DrawImage().
        //
        // Win2D has a single overloaded method, DrawImage.  With some
        // exceptions, each overload takes a ICanvasImage and will attempt to
        // call DrawBitmap() if possible, or DrawImage otherwise.
        //
        // The exceptions are:
        //
        //  - the overload that takes a destination rectangle and no source
        //    rectangle - the problem here is that non-bitmap images may have
        //    infinite size and so it is not possible to meaningfully scale an
        //    infinite sized image to fit in the destination rectangle.
        //
        //  - the overloads that take a perspective transform (it is more effort
        //    that it is worth to attempt to simulate the perspective transform
        //    for images)
        //
        // The set of overloads are organized like this, with all parameters
        // optional after <what>:
        //
        //   DrawImage(<what>, <where to>, <where from>, <opacity>, <interpolation>, <composite|perspective>)
        //
        // <what>         : either ICanvasImage or CanvasBitmap
        //
        // <where to>     : an offset (Vector2 or x,y) or destination rectangle
        //
        // <where from>   : a source rectangle
        //
        // <opacity>      : a float specifying opacity (simulated using an
        //                  effect for non-bitmaps)
        //
        // <interpolation>: CanvasImageInterpolation
        //
        // <composite>    : a composite mode (may call DrawImage even if <what>
        //                  is a bitmap)
        //
        // <perspective>  : the perspective transform - only for overloads where
        //                  <what> is a CanvasBitmap.
        //
        // Note that there is no overload that has both composite and
        // perspective.
        // 

        // DrawImage(ICanvasImage)
        [overload("DrawImage")]
        HRESULT DrawImageAtOrigin(
            [in] ICanvasImage* image);

        // DrawImage(ICanvasImage, Offset)
        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtOffset(
            [in] ICanvasImage* image, 
            [in] NUMERICS.Vector2 offset);

        // DrawImage(ICanvasImage, Coords)
        [overload("DrawImage")]
        HRESULT DrawImageAtCoords(
            [in] ICanvasImage* image, 
            [in] float x,
            [in] float y);

        // DrawImage(CanvasBitmap, Rect)
        [overload("DrawImage")]
        HRESULT DrawImageToRect(
            [in] CanvasBitmap* bitmap, 
            [in] Windows.Foundation.Rect destinationRectangle);

        // DrawImage(ICanvasImage, Offset, SourceRect)
        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtOffsetWithSourceRect(
            [in] ICanvasImage* image, 
            [in] NUMERICS.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRectangle);

        // DrawImage(ICanvasImage, Coords, SourceRect)
        [overload("DrawImage")]
        HRESULT DrawImageAtCoordsWithSourceRect(
            [in] ICanvasImage* image, 
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRectangle);

        // DrawImage(ICanvasImage, Rect,   SourceRect)
        [overload("DrawImage")]
        HRESULT DrawImageToRectWithSourceRect(
            [in] ICanvasImage* image,
            [in] Windows.Foundation.Rect destinationRectangle,
            [in] Windows.Foundation.Rect sourceRectangle);

        // DrawImage(ICanvasImage, Offset, SourceRect, Opacity)
        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtOffsetWithSourceRectAndOpacity(
            [in] ICanvasImage* image, 
            [in] NUMERICS.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity);

        // DrawImage(ICanvasImage, Coords, SourceRect, Opacity)
        [overload("DrawImage")]
        HRESULT DrawImageAtCoordsWithSourceRectAndOpacity(
            [in] ICanvasImage* image, 
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity);

        // DrawImage(ICanvasImage, Rect,   SourceRect, Opacity)
        [overload("DrawImage")]
        HRESULT DrawImageToRectWithSourceRectAndOpacity(
            [in] ICanvasImage* image,
            [in] Windows.Foundation.Rect destinationRectangle,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity);

        // DrawImage(ICanvasImage, Offset, SourceRect, Opacity, Interpolation)
        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(
            [in] ICanvasImage* image, 
            [in] NUMERICS.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation);

        // DrawImage(ICanvasImage, Coords, SourceRect, Opacity, Interpolation)
        [overload("DrawImage")]
        HRESULT DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(
            [in] ICanvasImage* image, 
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation);

        // DrawImage(ICanvasImage, Rect,   SourceRect, Opacity, Interpolation)
        [overload("DrawImage")]
        HRESULT DrawImageToRectWithSourceRectAndOpacityAndInterpolation(
            [in] ICanvasImage* image,
            [in] Windows.Foundation.Rect destinationRectangle,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation);

        // DrawImage(ICanvasImage, Offset, SourceRect, Opacity, Interpolation, Composite)
        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(
            [in] ICanvasImage* image, 
            [in] NUMERICS.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] CanvasComposite composite);

        // DrawImage(ICanvasImage, Coords, SourceRect, Opacity, Interpolation, Composite)
        [overload("DrawImage"), default_overload]
        HRESULT DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(
            [in] ICanvasImage* image, 
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] CanvasComposite composite);

        // DrawImage(ICanvasImage, Rect,   SourceRect, Opacity, Interpolation, Composite)
        [overload("DrawImage")]
        HRESULT DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(
            [in] ICanvasImage* image,
            [in] Windows.Foundation.Rect destinationRectangle,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] CanvasComposite composite);

        // DrawImage(CanvasBitmap, Offset, SourceRect, Opacity, Interpolation, Perspective)
        [overload("DrawImage")]
        HRESULT DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(
            [in] CanvasBitmap* bitmap, 
            [in] NUMERICS.Vector2 offset,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] NUMERICS.Matrix4x4 perspective);

        // DrawImage(CanvasBitmap, Coords, SourceRect, Opacity, Interpolation, Perspective)
        [overload("DrawImage")]
        HRESULT DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(
            [in] CanvasBitmap* bitmap, 
            [in] float x,
            [in] float y,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] NUMERICS.Matrix4x4 perspective);

        // DrawImage(CanvasBitmap, Rect,   SourceRect, Opacity, Interpolation, Perspective)
        [overload("DrawImage")]
        HRESULT DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(
            [in] CanvasBitmap* bitmap,
            [in] Windows.Foundation.Rect destinationRectangle,
            [in] Windows.Foundation.Rect sourceRectangle,
            [in] float opacity,
            [in] CanvasImageInterpolation interpolation,
            [in] NUMERICS.Matrix4x4 perspective);

        //
        // DrawInk
        //
#if WINVER > _WIN32_WINNT_WINBLUE
        [overload("DrawInk")]
        HRESULT DrawInk(
            [in] Windows.Foundation.Collections.IIterable<Windows.UI.Input.Inking.InkStroke*>* inkStrokes);

        [overload("DrawInk"), default_overload]
        HRESULT DrawInkWithHighContrast(
            [in] Windows.Foundation.Collections.IIterable<Windows.UI.Input.Inking.InkStroke*>* inkStrokes,
            [in] boolean highContrast);
#endif

        //
        // State properties
        //

        [propget] HRESULT Transform([out, retval] NUMERICS.Matrix3x2* value);
        [propput] HRESULT Transform([in] NUMERICS.Matrix3x2 value);

        [propget] HRESULT Units([out, retval] CanvasUnits* value);
        [propput] HRESULT Units([in] CanvasUnits value);

        [propget] HRESULT EffectBufferPrecision([out, retval] Windows.Foundation.IReference<CanvasBufferPrecision>** value);
        [propput] HRESULT EffectBufferPrecision([in] Windows.Foundation.IReference<CanvasBufferPrecision>* value);

        [propget] HRESULT EffectTileSize([out, retval] BitmapSize* value);
        [propput] HRESULT EffectTileSize([in] BitmapSize value);

        //
        // CreateLayer
        //

        [overload("CreateLayer")]
        HRESULT CreateLayerWithOpacity(
            [in] float opacity,
            [out, retval] CanvasActiveLayer** layer);

        [overload("CreateLayer")]
        HRESULT CreateLayerWithOpacityAndClipRectangle(
            [in] float opacity,
            [in] Windows.Foundation.Rect clipRectangle,
            [out, retval] CanvasActiveLayer** layer);
    };

    [STANDARD_ATTRIBUTES]
    runtimeclass CanvasDrawingSession
    {
        [default] interface ICanvasDrawingSession;
    };
}
